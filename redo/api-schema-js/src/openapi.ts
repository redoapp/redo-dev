/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = T | U extends object
  ? (Without<T, U> & U) | (Without<U, T> & T)
  : T | U;
type OneOf<T extends any[]> = T extends [infer Only]
  ? Only
  : T extends [infer A, infer B, ...infer Rest]
  ? OneOf<[XOR<A, B>, ...Rest]>
  : never;

export interface paths {
  "/__return": {
    /** Return event [Webhook] */
    post: operations["Webhook return event"];
  };
  "/returns/{returnId}/comments": {
    /**
     * List return comments
     * @description List return comments.
     */
    get: operations["Return comments get"];
    /**
     * Create return comment
     * @description Create return comment.
     */
    post: operations["Return comment create"];
    parameters: {
      path: {
        returnId: components["parameters"]["return-id.param"];
      };
    };
  };
  "/returns/{returnId}/status": {
    /**
     * Get return status
     * @description Get return status.
     */
    get: operations["Return status get"];
    /**
     * Update return status
     * @description Update return status.
     */
    put: operations["Return status update"];
    parameters: {
      path: {
        returnId: components["parameters"]["return-id.param"];
      };
    };
  };
  "/stores/{storeId}/returns": {
    /**
     * List returns
     * @description List returns, sorted by most recent to least recent.
     */
    get: operations["Returns list"];
    parameters: {
      path: {
        storeId: components["parameters"]["store-id.param"];
      };
    };
  };
  "/stores/{storeId}/webhooks": {
    /**
     * List webhooks
     * @description List webhooks for store.
     */
    get: operations["Webhooks list"];
    /**
     * Create or update webhook
     * @description Create webhook for store. Or if webhook already exists with `externalId`, update it.
     */
    post: operations["Webhook create"];
    parameters: {
      path: {
        storeId: components["parameters"]["store-id.param"];
      };
    };
  };
  "/webhooks/{webhookId}": {
    /**
     * Get webhook
     * @description Get a webhook.
     */
    get: operations["Webhook get"];
    /**
     * Update webhook
     * @description Update a webhook.
     */
    put: operations["Webhook update"];
    /**
     * Delete webhook
     * @description Delete a webbhook.
     */
    delete: operations["Webhook delete"];
    parameters: {
      path: {
        webhookId: components["parameters"]["webhook-id.param"];
      };
    };
  };
  "/webhooks/{webhookId}/replay": {
    /**
     * Replay webhook
     * @description Replay a webhook.
     */
    post: operations["Webhook replay"];
    parameters: {
      path: {
        webhookId: components["parameters"]["webhook-id.param"];
      };
    };
  };
}

export interface webhooks {
  return: {
    /** Return event [Webhook] */
    post: operations["Webhook return event"];
  };
}

export interface components {
  schemas: {
    /**
     * Address
     * @description Address.
     */
    "address.schema": {
      /**
       * City
       * @description City name
       */
      city: string;
      /**
       * Country
       * @description Country code
       */
      country: string;
      /**
       * Line 1
       * @description Line 1
       */
      line1: string;
      /**
       * Line 2
       * @description Line 2
       * @default
       */
      line2?: string;
      /**
       * Postal code
       * @description Postal or ZIP code
       */
      postalCode: string;
      /**
       * State
       * @description State or province code
       */
      state: string;
    };
    /**
     * Comment
     * @description Comment with either message or image.
     */
    "comment.schema": OneOf<
      [
        {
          /**
           * Image
           * @description Base64-encoded image
           */
          image?: string;
        },
        {
          /**
           * Message
           * @description Message.
           */
          message?: string;
        },
      ]
    >;
    /**
     * Problem details
     * @description See [RFC 7807 Section 3](https://datatracker.ietf.org/doc/html/rfc7807#section-3).
     */
    "error.schema": {
      /** @description A human-readable explanation specific to this occurrence of the problem. */
      detail?: string;
      /** @description A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced. */
      instance?: string;
      /** @description The HTTP status code ([[RFC7231], Section 6](https://datatracker.ietf.org/doc/html/rfc7231#section-6)) generated by the origin server for this occurrence of the problem. */
      status?: number;
      /** @description A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; see [[RFC7231], Section 3.4](https://datatracker.ietf.org/doc/html/rfc7231#section-3.4)). */
      title?: string;
      /**
       * Format: uri-reference
       * @description A URI reference [[RFC3986](https://datatracker.ietf.org/doc/html/rfc3986)] that identifies the problem type.  This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML [[W3C.REC-html5-20141028](https://datatracker.ietf.org/doc/html/rfc7807#ref-W3C.REC-html5-20141028)]).  When this member is not present, its value is assumed to be "about:blank".
       * @default about:blank
       */
      type?: string;
    };
    /**
     * Exchang provision
     * @example deferred
     * @enum {string}
     */
    "exchange-provision.schema": "instant" | "deferred";
    /**
     * HTTPS callback
     * @description HTTPS callback
     */
    "https-callback.schema": {
      /**
       * Authorization
       * @description Authorization.
       */
      auth: OneOf<
        [
          {
            /**
             * Bearer
             * @description Bearer
             */
            bearer?: {
              /**
               * Token
               * Format: password
               * @description Token for Bearer authorization.
               * @example abc123
               */
              token?: string;
            };
          },
          null,
        ]
      >;
      /**
       * URL
       * Format: uri
       * @description HTTPS callback URL.
       * @example https://subscriber.example.org/events
       */
      url: string;
    };
    /**
     * Item quantity
     * @description Item quantity.
     * @example 1
     */
    "item-quantity.schema": number;
    /**
     * Money
     * @description Currency amount
     */
    "money.schema": {
      /** Amount */
      amount?: number;
      /** Currency */
      currency?: string;
    };
    /**
     * Order
     * @description Order.
     */
    "order-read.schema": {
      customer: {
        /**
         * Email address
         * Format: email
         * @description Email address of customer.
         */
        emailAddress?: string;
        /**
         * Name
         * @description Name of customer.
         */
        name: components["schemas"]["person-name.schema"];
        /**
         * Phone number
         * @description Phone number of customer.
         */
        phoneNumber?: components["schemas"]["phone-number.schema"];
      };
      /**
       * External ID
       * @description Shopify ID
       */
      externalId?: string;
      /**
       * ID
       * @description Order ID
       * @example 64e4da943dd822979a70bd12
       */
      id: string;
      /** Line items */
      items: {
        /** @example 123 */
        externalId?: string;
        /**
         * ID
         * @description Line item ID
         */
        id: string;
        /** Product */
        product: components["schemas"]["product.schema"];
        /** Quantity */
        quantity: components["schemas"]["item-quantity.schema"];
        /** Variant */
        variant: components["schemas"]["product-variant.schema"];
      }[];
      /**
       * Name
       * @description Shopify name.
       */
      name: string;
    };
    /**
     * Person name
     * @description Person name.
     */
    "person-name.schema": {
      /** @description Given name */
      given: string;
      /** @description Surname */
      surname: string;
    };
    /**
     * Phone number
     * @description Phone number, in E.164 format
     */
    "phone-number.schema": string;
    /** Product variant */
    "product-variant.schema": {
      /** External ID */
      externalId?: string;
      /** Title */
      name: string;
      /** SKU */
      sku?: string;
      /** Weight */
      weight?: components["schemas"]["weight.schema"];
    };
    /**
     * Product
     * @description Product.
     */
    "product.schema": {
      /**
       * External ID
       * @description Product ID in external system (e.g. shopify).
       */
      externalId?: string;
      /**
       * Name
       * @description Product title
       */
      name: string;
    };
    /**
     * Return
     * @description Return read.
     */
    "return-read.schema": {
      /**
       * Created at
       * Format: date-time
       * @description Time of creation.
       */
      createdAt: string;
      destination: {
        /**
         * Mailing address
         * @description Mailing address to send the returned items.
         */
        mailingAddress?: components["schemas"]["address.schema"];
        /**
         * Phone number
         * @description Phone number of the destination.
         */
        phoneNumber?: components["schemas"]["phone-number.schema"];
      };
      /**
       * Exchange
       * @description Exchange order
       */
      exchange?: {
        /** Line items */
        items: {
          /** ID */
          id: string;
          /** Product */
          product: components["schemas"]["product.schema"];
          /** Quantity */
          quantity: components["schemas"]["item-quantity.schema"];
          variant: components["schemas"]["product-variant.schema"];
        }[];
        order?: {
          /**
           * External ID
           * @description ID of external order
           */
          externalId?: string;
          id?: string;
        };
        /** Provision */
        provision: components["schemas"]["exchange-provision.schema"];
      };
      /**
       * Identifier
       * @description Return identifier.
       */
      id: string;
      /** @description Return items */
      items: {
        /** Exchange item */
        exchangeItem?: {
          /**
           * ID
           * @description ID of exchange line item
           */
          id?: string;
        };
        /**
         * ID
         * @description Return item ID.
         */
        id?: string;
        /**
         * Order item
         * @description Order line item
         */
        orderItem?: {
          /**
           * ID
           * @description Line item ID in original order. Note: There can be more than return item for an original line item, with different quantity, return reasons, etc.
           */
          id?: string;
        };
        /** Quantity */
        quantity: components["schemas"]["item-quantity.schema"];
        /** @description Return reason */
        reason: string;
        /** @description Refund */
        refund?: {
          /** Amount */
          amount: components["schemas"]["money.schema"];
          /** Planned amount */
          pendingAmount: components["schemas"]["money.schema"];
          /**
           * Taxes
           * @description Taxes.
           */
          pendingTaxAmount: components["schemas"]["money.schema"];
          /**
           * Taxes
           * @description Taxes.
           */
          taxAmount: components["schemas"]["money.schema"];
          /**
           * @description Refund method
           * @enum {string}
           */
          type: "credit" | "refund";
        };
      }[];
      /**
       * Order
       * @description Original order.
       */
      order: {
        /**
         * ID
         * @description Order ID.
         * @example abc123
         */
        id: string;
      };
      /**
       * Shipment
       * @description Shipment, if has been made
       */
      shipment?: {
        /**
         * Carrier
         * @description Carrier code
         */
        carrier?: string;
        /**
         * Status
         * @description Status of shipment
         * @enum {string}
         */
        status?:
          | "pre_transit"
          | "transit"
          | "delivered"
          | "cancelled"
          | "flagged";
        /**
         * Tracker
         * @description Tracking number
         */
        tracker?: string;
      };
      source: {
        /**
         * Email address
         * Format: email
         * @description Email address.
         */
        emailAddress: string;
        /**
         * Mailing address
         * @description Mailing address returned items are sent from.
         */
        mailingAddress: components["schemas"]["address.schema"];
        /**
         * Name
         * @description Name of returner.
         */
        name: components["schemas"]["person-name.schema"];
        /**
         * Phone number
         * @description Phone number of returner.
         */
        phoneNumber: components["schemas"]["phone-number.schema"];
      };
      /**
       * Status
       * @description Return status.
       */
      status: components["schemas"]["return-status.schema"];
      /**
       * Updated at
       * Format: date-time
       * @description Time of last update.
       */
      updatedAt: string;
    };
    /**
     * Return status
     * @description Return status.
     *
     * * manual_review: Return requires pre-shipment merchant authorization.
     * * open: Return has been approved is awaiting shipment.
     * * transit: Return shipment is in transit.
     * * delivered: Return shipment has been delievered and awaiting processing.
     * * flagged: A problem with return processing requires merchant action.
     * * cancelled: The return has been cancelled.
     * * closed: The return has been completed.
     *
     * @example open
     * @enum {string}
     */
    "return-status.schema":
      | "manual_review"
      | "open"
      | "transit"
      | "delivered"
      | "flagged"
      | "cancelled"
      | "closed";
    /**
     * Webhook create
     * @description Webhook create.
     */
    "webhook-create.schema": {
      /**
       * Backfill
       * @description Create events for already-existing items
       * @default false
       */
      backfill?: boolean;
      /**
       * HTTPS callback
       * @description HTTPS callback to POST events.
       */
      callback: components["schemas"]["https-callback.schema"];
      /**
       * External ID
       * @description Optional external identifier.
       * @default null
       */
      externalId?: string | null;
      /**
       * Topic
       * @description Topic.
       */
      topic: components["schemas"]["webhook-topic.schema"];
    };
    /**
     * Webhook read
     * @description Webhook read.
     */
    "webhook-read.schema": {
      /**
       * Callback
       * @description HTTPS callback URL to POST events.
       */
      callback: components["schemas"]["https-callback.schema"];
      /**
       * Created at.
       * Format: date-time
       * @description Time created.
       */
      createdAt: string;
      /**
       * External ID
       * @description Optional external identifier.
       * @default null
       */
      externalId?: string | null;
      /**
       * ID
       * @description Webhook ID.
       */
      id?: string;
      /**
       * Topic
       * @description Topic.
       */
      topic: components["schemas"]["webhook-topic.schema"];
      /**
       * Updated at.
       * Format: date-time
       * @description Last time updated.
       */
      updatedAt: string;
    };
    /**
     * Webhook topic
     * @description Webhook topic.
     * @enum {string}
     */
    "webhook-topic.schema": "return";
    /**
     * Webhook update
     * @description Webhook update.
     */
    "webhook-update.schema": {
      /**
       * HTTPS callback
       * @description HTTPS callback to POST events.
       */
      callback: components["schemas"]["https-callback.schema"];
      /**
       * External ID
       * @description Optional external identifier.
       * @default null
       */
      externalId?: string | null;
    };
    /**
     * Weight
     * @description Weight.
     */
    "weight.schema": {
      /**
       * Kilograms
       * @description Weight in kilograms
       */
      kg?: number;
    };
  };
  responses: never;
  parameters: {
    /**
     * @description Page marker, from X-Page-Next header
     * @example 64df700931a04885276c3364
     */
    "page-continue.param"?: string;
    /**
     * @description Page size, defaults to 20
     * @example 20
     */
    "page-size.param"?: number;
    /** @description Return ID */
    "return-id.param": string;
    /** @description Store ID */
    "store-id.param": string;
    /**
     * @description Maximum updated time, exclusive
     * @example 2000-02-01T00:00:00Z
     */
    "updated-at-max.param"?: string;
    /**
     * @description Minimum updated time, inclusive
     * @example 2000-01-01T00:00:00Z
     */
    "updated-at-min.param"?: string;
    /** @description Webhook ID */
    "webhook-id.param": string;
  };
  requestBodies: never;
  headers: {
    /** @description Next value for X-Page-Continue, for more results */
    "page-next.header": string;
  };
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /** Return event [Webhook] */
  "Webhook return event": {
    /**
     * @description Return event webhook.
     *
     * <!-- theme: warning -->
     * > #### Note
     * >
     * > This is not an actual Redo API endpoint, but a webhook.
     */
    requestBody: {
      content: {
        "application/json": {
          /**
           * At
           * Format: date-time
           * @description Event time
           */
          at?: string;
          /**
           * Order
           * @description Order for return.
           */
          order?: components["schemas"]["order-read.schema"];
          /**
           * Return
           * @description Return.
           */
          return?: components["schemas"]["return-read.schema"];
          /**
           * @description Event type
           * @enum {string}
           */
          type?: "backfill" | "created" | "updated";
        };
      };
    };
    responses: {
      /** @description Success. Return a 2xx status code to indicate success. */
      "2xx": {
        content: never;
      };
      /** @description Error. The event will be retried multiple times and then discarded. */
      default: {
        content: never;
      };
    };
  };
  /**
   * List return comments
   * @description List return comments.
   */
  "Return comments get": {
    parameters: {
      path: {
        returnId: components["parameters"]["return-id.param"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            /**
             * Comments
             * @description Return comments.
             */
            comments: components["schemas"]["comment.schema"][];
          };
        };
      };
    };
  };
  /**
   * Create return comment
   * @description Create return comment.
   */
  "Return comment create": {
    parameters: {
      path: {
        returnId: components["parameters"]["return-id.param"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          comment: components["schemas"]["comment.schema"];
        };
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": {
            comment: components["schemas"]["comment.schema"];
          };
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["error.schema"];
        };
      };
    };
  };
  /**
   * Get return status
   * @description Get return status.
   */
  "Return status get": {
    parameters: {
      path: {
        returnId: components["parameters"]["return-id.param"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            status: components["schemas"]["return-status.schema"];
          };
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["error.schema"];
        };
      };
    };
  };
  /**
   * Update return status
   * @description Update return status.
   */
  "Return status update": {
    parameters: {
      path: {
        returnId: components["parameters"]["return-id.param"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          status: components["schemas"]["return-status.schema"];
        };
      };
    };
    responses: {
      /** @description Updated */
      204: {
        content: never;
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["error.schema"];
        };
      };
    };
  };
  /**
   * List returns
   * @description List returns, sorted by most recent to least recent.
   */
  "Returns list": {
    parameters: {
      query?: {
        updated_at_max?: components["parameters"]["updated-at-max.param"];
        updated_at_min?: components["parameters"]["updated-at-min.param"];
      };
      header?: {
        "X-Page-Continue"?: components["parameters"]["page-continue.param"];
        "X-Page-Size"?: components["parameters"]["page-size.param"];
      };
      path: {
        storeId: components["parameters"]["store-id.param"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          "X-Page-Next": components["headers"]["page-next.header"];
        };
        content: {
          "application/json": {
            orders: components["schemas"]["order-read.schema"][];
            returns: components["schemas"]["return-read.schema"][];
          };
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["error.schema"];
        };
      };
    };
  };
  /**
   * List webhooks
   * @description List webhooks for store.
   */
  "Webhooks list": {
    parameters: {
      path: {
        storeId: components["parameters"]["store-id.param"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            webhooks: components["schemas"]["webhook-read.schema"][];
          };
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["error.schema"];
        };
      };
    };
  };
  /**
   * Create or update webhook
   * @description Create webhook for store. Or if webhook already exists with `externalId`, update it.
   */
  "Webhook create": {
    parameters: {
      path: {
        storeId: components["parameters"]["store-id.param"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          webhook?: components["schemas"]["webhook-create.schema"];
        };
      };
    };
    responses: {
      /** @description Updated */
      200: {
        content: {
          "application/json": {
            webhook?: components["schemas"]["webhook-read.schema"];
          };
        };
      };
      /** @description Created */
      201: {
        content: {
          "application/json": {
            webhook?: components["schemas"]["webhook-read.schema"];
          };
        };
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["error.schema"];
        };
      };
    };
  };
  /**
   * Get webhook
   * @description Get a webhook.
   */
  "Webhook get": {
    parameters: {
      path: {
        webhookId: components["parameters"]["webhook-id.param"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            webhook: components["schemas"]["webhook-read.schema"];
          };
        };
      };
    };
  };
  /**
   * Update webhook
   * @description Update a webhook.
   */
  "Webhook update": {
    parameters: {
      path: {
        webhookId: components["parameters"]["webhook-id.param"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          webhook?: components["schemas"]["webhook-update.schema"];
        };
      };
    };
    responses: {
      /** @description Success */
      204: {
        content: never;
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["error.schema"];
        };
      };
    };
  };
  /**
   * Delete webhook
   * @description Delete a webbhook.
   */
  "Webhook delete": {
    parameters: {
      path: {
        webhookId: components["parameters"]["webhook-id.param"];
      };
    };
    responses: {
      /** @description Deleted */
      204: {
        content: never;
      };
    };
  };
  /**
   * Replay webhook
   * @description Replay a webhook.
   */
  "Webhook replay": {
    parameters: {
      path: {
        webhookId: components["parameters"]["webhook-id.param"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Format: date-time */
          start: string;
        };
      };
    };
    responses: {
      /** @description Success */
      202: {
        content: never;
      };
      /** @description Error */
      default: {
        content: {
          "application/problem+json": components["schemas"]["error.schema"];
        };
      };
    };
  };
}
